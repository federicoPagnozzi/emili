<?xml version="1.0" encoding="UTF-8" ?>

<!-- TODO: all the new inside the calls should be pushed in some datastructure
           and properly freed before the end to avoid memory leaks... -->

<gr:grammar xmlns:gr="grammar">
    <gr:derivations xmlns:pfsp="pfsp_automatic_generation">
	
	 <pfsp:iteration_number type="int" min="1" max="1000" stepIfEnumerated="1"/>
	 <pfsp:time type="int" min="1" stepIfEnumerated="1"/>
	 <pfsp:steps type="int" min="1" stepIfEnumerated="1"/>
	 <pfsp:sp_impact type="int" min="5" stepIfEnumerated="1"/>
	 <pfsp:s_acc_temp type="float" min="0.1" max="5" stepIfEnumerated="0.1"/>
	 <pfsp:ac_percentage type="int" min="1" max="100" stepIfEnumerated="1"/>
	 <pfsp:metropolis_temp type="float" min="0.1" stepIfEnumerated="1"/>
	 <pfsp:tabutenure_size type="int" min="1" max="20" stepIfEnumerated="1"/>

        <pfsp:initial_solution>
           <![CDATA[
                emili::InitialSolution* in = new emili::pfsp::PfspRandomInitialSolution(problem);
           ]]>
           <or/>
           <![CDATA[
                emili::InitialSolution* in = new emili::pfsp::PfspSlackInitialSolution(problem);
           ]]>
           <or/>
           <![CDATA[
                emili::InitialSolution* in = new emili::pfsp::PfspNEHwslackInitialSolution(problem);
           ]]>
        </pfsp:initial_solution>

	<pfsp:termination>
	   <![CDATA[
	 		
         emili::Termination* te =  new emili::LocalMinimaTermination();

	]]>
           <or/>
	   <![CDATA[
        emili::Termination* te =  new emili::WhileTrueTermination();
	]]>
           <or/>
	   <![CDATA[
        emili::Termination* te =  new emili::pfsp::PfspTerminationIterations(]]><pfsp:iteration_number/><![CDATA[);
	]]>
           <or/>
	   <![CDATA[
        int ti = problem.getNjobs();
         ti = 2*(ti-1);
        emili::Termination* te =  new emili::pfsp::SOAtermination(ti);
	]]>
           <or/>
	   <![CDATA[

        emili::Termination* te =  new emili::TimedTermination(]]><pfsp:time/><![CDATA[);
	]]>
           <or/>
	   <![CDATA[
         emili::Termination* te = new emili::MaxStepsTermination(]]><pfsp:steps/><![CDATA[);
	]]>

	</pfsp:termination>

	<pfsp:neighborhood>
	   <![CDATA[
          emili::pfsp::PfspNeighborhood* ne = new emili::pfsp::PfspExchangeNeighborhood(problem);
	]]>
	<or/>
	   <![CDATA[
          emili::pfsp::PfspNeighborhood* ne = new emili::pfsp::PfspTransposeNeighborhood(problem);
	]]>
	<or/>
	   <![CDATA[
          emili::pfsp::PfspNeighborhood* ne = new emili::pfsp::PfspInsertNeighborhood(problem);
	]]>
	<or/>
	   <![CDATA[
          emili::pfsp::PfspNeighborhood* ne = new emili::pfsp::PfspForwardInsertNeighborhood(problem);
	]]>
	<or/>
	   <![CDATA[
          emili::pfsp::PfspNeighborhood* ne = new emili::pfsp::PfspBackwardInsertNeighborhood(problem);
	]]>
	</pfsp:neighborhood>
		
	
	<pfsp:neighborhoodv>
		<pfsp:neighborhood/>
		<![CDATA[
			nes.push_back(ne);
		]]>	
	</pfsp:neighborhoodv>
	
	<pfsp:nothing/>

	<pfsp:neighborhoods>
		<pfsp:neighborhoodv/>
		<pfsp:neighborhoods/>
		<or/>
		<pfsp:nothing/>	
	</pfsp:neighborhoods>
	
	<pfsp:pertubation>
		<![CDATA[
			emili::Pertubation* pr = new emili::pfsp::SOAPerturbation(]]><pfsp:sp_impact/><![CDATA[,problem);
		]]>
	  	<or/>
		<![CDATA[
		 	emili::Pertubation* pr = new emili::pfsp::PfspRandomSwapPertub(problem);
		]]>
	</pfsp:pertubation>

	<pfsp:acceptance>
		<![CDATA[
			emili::AcceptanceCriteria* ac = new emili::pfsp::SOAacceptance(]]><pfsp:s_acc_temp/><![CDATA[); 
		]]>
		<or/>
		<![CDATA[
			emili::AcceptanceCriteria* ac =  new emili::pfsp::PfspTestAcceptance(problem,]]><pfsp:ac_percentage/><![CDATA[);
		]]>
		<or/>
		<![CDATA[
			emili::AcceptanceCriteria* ac =  new emili::MetropolisAcceptance(]]><pfsp:metropolis_temp/><![CDATA[);
		]]>
	</pfsp:acceptance>	

	<pfsp:tabutenure>
	     <![CDATA[
			emili::TabuMemory* tm =new emili::pfsp::PfspMovesMemory(]]><pfsp:tabutenure_size/><![CDATA[ , *ne);
	     ]]>
	     <or/>
	     <![CDATA[
			emili::TabuMemory* tm = new emili::pfsp::PfspTabuHashMemory(]]><pfsp:tabutenure_size/><![CDATA[); 
	     ]]>
	     <or/>
	     <![CDATA[
			emili::TabuMemory* tm = new emili::pfsp::PfspFullSolutionMemory(]]><pfsp:tabutenure_size/><![CDATA[); 
	     ]]>
	</pfsp:tabutenure>

	<pfsp:first>
		  <pfsp:initial_solution/>
          	  <pfsp:termination/>
  		  <pfsp:neighborhood/>

		<![CDATA[
			ls = new emili::FirstImprovement(*in,*te,*ne);
		]]>
	</pfsp:first>

	<pfsp:best>
           <pfsp:initial_solution/>
           <pfsp:termination/>
	   <pfsp:neighborhood/>

		<![CDATA[
			ls = new emili::BestImprovement(*in,*te,*ne);
		]]>
	</pfsp:best>

	<pfsp:ils>
		<pfsp:algos/>
		<pfsp:termination/>
		<pfsp:pertubation/>
		<pfsp:acceptance/>
		<![CDATA[
			ls =  new emili::IteratedLocalSearch(*ls,*te,*pr,*ac);
		]]>
	</pfsp:ils>

	<pfsp:tabu>
        	<pfsp:initial_solution/>
        	<pfsp:termination/>
		<pfsp:neighborhood/>
		<pfsp:tabutenure/>
		<![CDATA[
			ls = new emili::TabuSearch(*in,*te,*ne,*tm);
		]]>
	</pfsp:tabu>

	<pfsp:vnd>
		<pfsp:initial_solution/>
		<pfsp:termination/>
		<pfsp:neighborhood/>
		<![CDATA[
		 	std::vector< emili::Neighborhood* > nes;
			nes.push_back(ne);
		]]>
		<pfsp:neighborhoods/>
		<pfsp:vnds/>
	</pfsp:vnd>

	<pfsp:vnds>
		<![CDATA[
			ls = new emili::VNDSearch<emili::FirstImprovementSearch>(*in,*te,nes);
		]]>
		<or/>
		<![CDATA[
			ls = new emili::VNDSearch<emili::BestImprovementSearch>(*in,*te,nes);
		]]>
	</pfsp:vnds>
	
	<pfsp:algos>
		<pfsp:first/>
		<or/>
		<pfsp:best/>
		<or/>
		<pfsp:ils/>
		<or/>
		<pfsp:tabu/>
		<or/>
		<pfsp:vnd/>
	</pfsp:algos>

        <pfsp:main_algorithm output="algorithm.h">
		<![CDATA[
			#define GRAMMAR2CODE
		]]>
	
        	<pfsp:algos/>     
           <![CDATA[
                /*emili::LocalSearch* ls = new emili::FirstImprovementSearch(*in, *te, *ne);
		clock_t time = clock();
		if(search_time == 0 )
			solution = ls->search();
		else
			solution = ls->timedSearch(search_time);
		*/
           ]]>
        </pfsp:main_algorithm>

    </gr:derivations>
</gr:grammar>
